{
  "version": 3,
  "sources": ["../node_modules/src/src/Router.ts", "../node_modules/src/src/StatusError.ts", "../node_modules/src/src/createResponse.ts", "../node_modules/src/src/json.ts", "../node_modules/src/src/error.ts", "../node_modules/src/src/status.ts", "../node_modules/src/src/text.ts", "../node_modules/src/src/html.ts", "../node_modules/src/src/jpeg.ts", "../node_modules/src/src/png.ts", "../node_modules/src/src/webp.ts", "../node_modules/src/src/withContent.ts", "../node_modules/src/src/withCookies.ts", "../node_modules/src/src/withParams.ts", "../node_modules/src/src/createCors.ts", "../src/game-logic.js", "../src/worker-enhanced.js"],
  "sourceRoot": "dist-worker",
  "sourcesContent": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "/**\r\n * Core game logic for Color Me Same\r\n * Pure functions that can run in both Worker and browser contexts\r\n */\r\n\r\n// Game configuration\r\nexport const GAME_CONFIG = {\r\n  COLOR_PALETTE: ['#FF4444', '#44DD44', '#4444FF', '#FFAA00', '#AA44FF', '#44DDDD'],\r\n  COLOR_NAMES: ['Red', 'Green', 'Blue', 'Orange', 'Purple', 'Cyan'],\r\n  \r\n  DIFFICULTIES: {\r\n    easy: {\r\n      size: 3,\r\n      colors: 3,\r\n      reverseSteps: 3,\r\n      maxMoves: 0,\r\n      maxLockedTiles: 0,\r\n      powerTileChance: 0,\r\n      timeLimit: 0,\r\n      tutorialEnabled: true,\r\n      description: 'Perfect for learning! No limits, full tutorial.',\r\n    },\r\n    medium: {\r\n      size: 4,\r\n      colors: 4,\r\n      reverseSteps: 5,\r\n      maxMoves: 25,\r\n      maxLockedTiles: 1,\r\n      powerTileChance: 0.1,\r\n      timeLimit: 0,\r\n      tutorialEnabled: false,\r\n      description: 'More complex puzzles with special tiles.',\r\n    },\r\n    hard: {\r\n      size: 5,\r\n      colors: 4,\r\n      reverseSteps: 7,\r\n      maxMoves: 35,\r\n      maxLockedTiles: 2,\r\n      powerTileChance: 0.15,\r\n      timeLimit: 600,\r\n      tutorialEnabled: false,\r\n      description: 'Advanced puzzles with time challenge.',\r\n    },\r\n    expert: {\r\n      size: 6,\r\n      colors: 5,\r\n      reverseSteps: 10,\r\n      maxMoves: 50,\r\n      maxLockedTiles: 3,\r\n      powerTileChance: 0.2,\r\n      timeLimit: 480,\r\n      tutorialEnabled: false,\r\n      description: 'For puzzle masters only!',\r\n    },\r\n    infinite: {\r\n      size: 5,\r\n      colors: 6,\r\n      reverseSteps: 15,\r\n      maxMoves: 0,\r\n      maxLockedTiles: 4,\r\n      powerTileChance: 0.25,\r\n      timeLimit: 0,\r\n      tutorialEnabled: false,\r\n      description: 'Endless challenge mode.',\r\n    }\r\n  },\r\n  \r\n  WORLDS: {\r\n    sandbox: { name: 'Sandbox', belt: 'white', unlockRequirement: null },\r\n    world1: { name: 'Beginner\\'s Garden', belt: 'yellow', unlockRequirement: { puzzles: 5, minStars: 1 } },\r\n    world2: { name: 'Power Plaza', belt: 'orange', unlockRequirement: { puzzles: 3, minStars: 2 } },\r\n    world3: { name: 'Reflection Ridge', belt: 'green', unlockRequirement: { goldStars: 1 } },\r\n    world4: { name: 'Time Temple', belt: 'blue', unlockRequirement: { allSilver: true } },\r\n    world5: { name: 'Master\\'s Domain', belt: 'purple', unlockRequirement: { dailyStreak: 1 } }\r\n  }\r\n};\r\n\r\n// Helper functions\r\nexport function deepClone(grid) {\r\n  return grid.map(row => [...row]);\r\n}\r\n\r\nexport function getNextColor(current, totalColors) {\r\n  return (current + 1) % totalColors;\r\n}\r\n\r\nexport function isWinningState(grid) {\r\n  if (!grid || !grid.length) return false;\r\n  const firstColor = grid[0][0];\r\n  return grid.every(row => row.every(cell => cell === firstColor));\r\n}\r\n\r\n// Calculate effect matrix for a move\r\nexport function calculateMoveEffect(row, col, size, isPowerTile) {\r\n  const effect = Array(size).fill(null).map(() => Array(size).fill(0));\r\n  \r\n  if (isPowerTile) {\r\n    // Power tiles affect 3x3 area\r\n    for (let r = Math.max(0, row - 1); r <= Math.min(size - 1, row + 1); r++) {\r\n      for (let c = Math.max(0, col - 1); c <= Math.min(size - 1, col + 1); c++) {\r\n        effect[r][c] = 1;\r\n      }\r\n    }\r\n  } else {\r\n    // Normal tiles affect cross pattern\r\n    effect[row][col] = 1;\r\n    const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\r\n    directions.forEach(([dr, dc]) => {\r\n      const newRow = row + dr;\r\n      const newCol = col + dc;\r\n      if (newRow >= 0 && newRow < size && newCol >= 0 && newCol < size) {\r\n        effect[newRow][newCol] = 1;\r\n      }\r\n    });\r\n  }\r\n  \r\n  return effect;\r\n}\r\n\r\n// Apply a move to the grid\r\nexport function applyMove(grid, row, col, powerTiles, lockedTiles, totalColors) {\r\n  const newGrid = deepClone(grid);\r\n  const size = grid.length;\r\n  const tileKey = `${row}-${col}`;\r\n  const isPowerTile = powerTiles.has(tileKey);\r\n  \r\n  const effect = calculateMoveEffect(row, col, size, isPowerTile);\r\n  const changedTiles = [];\r\n  \r\n  for (let r = 0; r < size; r++) {\r\n    for (let c = 0; c < size; c++) {\r\n      const key = `${r}-${c}`;\r\n      if (effect[r][c] && !lockedTiles.has(key)) {\r\n        const oldColor = newGrid[r][c];\r\n        newGrid[r][c] = getNextColor(oldColor, totalColors);\r\n        changedTiles.push({\r\n          row: r,\r\n          col: c,\r\n          oldColor,\r\n          newColor: newGrid[r][c]\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    grid: newGrid,\r\n    changedTiles,\r\n    isPowerMove: isPowerTile\r\n  };\r\n}\r\n\r\n// BFS solver with memoization\r\nexport async function solvePuzzle(initialGrid, powerTiles, lockedTiles, totalColors) {\r\n  const startTime = Date.now();\r\n  const visited = new Set();\r\n  const queue = [{ state: initialGrid, path: [] }];\r\n  const gridToString = (g) => g.map(row => row.join('')).join('|');\r\n  const MAX_STATES = 10000;\r\n  const MAX_DEPTH = 30;\r\n  \r\n  let statesExplored = 0;\r\n  \r\n  while (queue.length > 0 && statesExplored < MAX_STATES) {\r\n    const { state, path } = queue.shift();\r\n    const stateKey = gridToString(state);\r\n    \r\n    if (visited.has(stateKey)) continue;\r\n    visited.add(stateKey);\r\n    statesExplored++;\r\n    \r\n    if (isWinningState(state)) {\r\n      return {\r\n        solution: path,\r\n        solvable: true,\r\n        statesExplored,\r\n        timeMs: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    if (path.length >= MAX_DEPTH) continue;\r\n    \r\n    // Try all possible moves\r\n    const size = state.length;\r\n    for (let r = 0; r < size; r++) {\r\n      for (let c = 0; c < size; c++) {\r\n        const key = `${r}-${c}`;\r\n        if (!lockedTiles.has(key)) {\r\n          const result = applyMove(state, r, c, powerTiles, lockedTiles, totalColors);\r\n          const newStateKey = gridToString(result.grid);\r\n          \r\n          if (!visited.has(newStateKey)) {\r\n            queue.push({\r\n              state: result.grid,\r\n              path: [...path, { row: r, col: c }]\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    solution: [],\r\n    solvable: false,\r\n    statesExplored,\r\n    timeMs: Date.now() - startTime\r\n  };\r\n}\r\n\r\n// Generate a puzzle by reverse moves\r\nexport async function generatePuzzle(difficulty = 'easy') {\r\n  const config = GAME_CONFIG.DIFFICULTIES[difficulty];\r\n  const { size, reverseSteps, maxLockedTiles, powerTileChance, colors } = config;\r\n  \r\n  // Start with solved grid (all zeros)\r\n  const solvedGrid = Array(size).fill(null).map(() => Array(size).fill(0));\r\n  \r\n  // Generate special tiles\r\n  const powerTiles = new Set();\r\n  const lockedTiles = new Map();\r\n  \r\n  // Add power tiles\r\n  if (powerTileChance > 0) {\r\n    const numPowerTiles = Math.min(3, Math.floor(size * size * powerTileChance));\r\n    while (powerTiles.size < numPowerTiles) {\r\n      const r = Math.floor(Math.random() * size);\r\n      const c = Math.floor(Math.random() * size);\r\n      powerTiles.add(`${r}-${c}`);\r\n    }\r\n  }\r\n  \r\n  // Add locked tiles\r\n  while (lockedTiles.size < maxLockedTiles) {\r\n    const r = Math.floor(Math.random() * size);\r\n    const c = Math.floor(Math.random() * size);\r\n    const key = `${r}-${c}`;\r\n    if (!powerTiles.has(key)) {\r\n      lockedTiles.set(key, Math.floor(Math.random() * 3) + 2); // 2-4 moves to unlock\r\n    }\r\n  }\r\n  \r\n  // Apply reverse moves to create puzzle\r\n  let currentGrid = deepClone(solvedGrid);\r\n  const reverseMoves = [];\r\n  \r\n  for (let i = 0; i < reverseSteps; i++) {\r\n    // Find all valid moves\r\n    const validMoves = [];\r\n    for (let r = 0; r < size; r++) {\r\n      for (let c = 0; c < size; c++) {\r\n        if (!lockedTiles.has(`${r}-${c}`)) {\r\n          validMoves.push({ row: r, col: c });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Pick random move\r\n    const move = validMoves[Math.floor(Math.random() * validMoves.length)];\r\n    const result = applyMove(currentGrid, move.row, move.col, powerTiles, new Map(), colors);\r\n    currentGrid = result.grid;\r\n    reverseMoves.push(move);\r\n  }\r\n  \r\n  // Verify puzzle is solvable\r\n  const solution = await solvePuzzle(currentGrid, powerTiles, lockedTiles, colors);\r\n  \r\n  return {\r\n    grid: currentGrid,\r\n    solvedGrid,\r\n    powerTiles: Array.from(powerTiles),\r\n    lockedTiles: Object.fromEntries(lockedTiles),\r\n    solution: solution.solution,\r\n    reverseMoves,\r\n    verified: solution.solvable,\r\n    statesExplored: solution.statesExplored,\r\n    difficulty,\r\n    config\r\n  };\r\n}\r\n\r\n// Calculate score\r\nexport function calculateScore(moves, optimalMoves, timeSeconds, timeLimit, difficulty) {\r\n  const baseScore = 1000;\r\n  const efficiencyBonus = optimalMoves ? Math.round((optimalMoves / moves) * 100) * 10 : 0;\r\n  const timeBonus = timeLimit ? Math.max(0, (timeLimit - timeSeconds) * 5) : 500;\r\n  \r\n  const difficultyMultiplier = {\r\n    easy: 1,\r\n    medium: 1.5,\r\n    hard: 2,\r\n    expert: 3,\r\n    infinite: 4\r\n  }[difficulty] || 1;\r\n  \r\n  return Math.round((baseScore + efficiencyBonus + timeBonus) * difficultyMultiplier);\r\n}\r\n\r\n// Daily puzzle seed generation\r\nexport function getDailySeed() {\r\n  const today = new Date();\r\n  const dateString = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;\r\n  \r\n  // Simple hash function for consistent daily seeds\r\n  let hash = 0;\r\n  for (let i = 0; i < dateString.length; i++) {\r\n    const char = dateString.charCodeAt(i);\r\n    hash = ((hash << 5) - hash) + char;\r\n    hash = hash & hash; // Convert to 32-bit integer\r\n  }\r\n  \r\n  return Math.abs(hash);\r\n}", "/**\n * Color Me Same - Enhanced Cloudflare Worker\n * Serves React app and handles API endpoints\n */\n\nimport { Router } from 'itty-router';\nimport { generatePuzzle, solvePuzzle, applyMove, isWinningState } from './game-logic.js';\n\nconst router = Router();\n\n// Import manifest for production assets\nimport manifestJSON from '__STATIC_CONTENT_MANIFEST';\nconst manifest = JSON.parse(manifestJSON || '{}');\n\n// API Routes\nrouter.post('/api/generate', async (request) => {\n  const { difficulty = 'easy' } = await request.json();\n  const puzzle = await generatePuzzle(difficulty);\n  \n  return new Response(JSON.stringify(puzzle), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n});\n\nrouter.post('/api/solve', async (request) => {\n  const { grid, power, locked, colors } = await request.json();\n  const solution = await solvePuzzle(grid, power, locked, colors);\n  \n  return new Response(JSON.stringify(solution), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n});\n\nrouter.post('/api/move', async (request) => {\n  const { grid, row, col, power, locked, colors } = await request.json();\n  const result = applyMove(grid, row, col, power, locked, colors);\n  const won = isWinningState(result.grid);\n  \n  return new Response(JSON.stringify({ ...result, won }), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n});\n\nrouter.get('/api/leaderboard/:difficulty', async (request, env) => {\n  const { difficulty } = request.params;\n  const leaderboard = await env.GAME_STATE.get(`leaderboard:${difficulty}`, { type: 'json' });\n  \n  return new Response(JSON.stringify(leaderboard || []), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n});\n\nrouter.post('/api/score', async (request, env) => {\n  const { name, score, moves, time, difficulty } = await request.json();\n  \n  const key = `leaderboard:${difficulty}`;\n  const leaderboard = await env.GAME_STATE.get(key, { type: 'json' }) || [];\n  \n  leaderboard.push({\n    name,\n    score,\n    moves,\n    time,\n    timestamp: Date.now(),\n  });\n  \n  leaderboard.sort((a, b) => b.score - a.score);\n  leaderboard.splice(100);\n  \n  await env.GAME_STATE.put(key, JSON.stringify(leaderboard));\n  \n  return new Response(JSON.stringify({ success: true }), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n});\n\n// Serve static assets and React app\nrouter.get('/*', async (request, env, ctx) => {\n  const url = new URL(request.url);\n  \n  // In development, proxy to Vite dev server\n  if (env.ENVIRONMENT === 'development') {\n    return fetch(`http://localhost:3000${url.pathname}`);\n  }\n  \n  // In production, serve from KV/R2\n  try {\n    // Try exact path first\n    let asset = await env.__STATIC_CONTENT.get(url.pathname);\n    \n    // If not found and no extension, try index.html (SPA routing)\n    if (!asset && !url.pathname.includes('.')) {\n      asset = await env.__STATIC_CONTENT.get('index.html');\n    }\n    \n    if (asset) {\n      const headers = {\n        'Content-Type': getMimeType(url.pathname),\n        'Cache-Control': url.pathname === '/index.html' \n          ? 'public, max-age=0, must-revalidate' \n          : 'public, max-age=31536000, immutable',\n      };\n      \n      return new Response(asset.body, { headers });\n    }\n  } catch (e) {\n    console.error('Error serving asset:', e);\n  }\n  \n  return new Response('Not found', { status: 404 });\n});\n\nfunction getMimeType(pathname) {\n  const ext = pathname.split('.').pop()?.toLowerCase();\n  const types = {\n    'js': 'application/javascript',\n    'mjs': 'application/javascript',\n    'css': 'text/css',\n    'html': 'text/html',\n    'png': 'image/png',\n    'jpg': 'image/jpeg',\n    'jpeg': 'image/jpeg',\n    'svg': 'image/svg+xml',\n    'json': 'application/json',\n    'woff': 'font/woff',\n    'woff2': 'font/woff2',\n    'ttf': 'font/ttf',\n    'otf': 'font/otf',\n  };\n  return types[ext] || 'text/plain';\n}\n\n// WebSocket support for multiplayer\nexport class GameSession {\n  constructor(state, env) {\n    this.state = state;\n    this.env = env;\n    this.sessions = new Map();\n  }\n\n  async fetch(request) {\n    const url = new URL(request.url);\n    \n    if (url.pathname === '/websocket') {\n      const upgradeHeader = request.headers.get('Upgrade');\n      if (upgradeHeader !== 'websocket') {\n        return new Response('Expected Upgrade: websocket', { status: 426 });\n      }\n\n      const [client, server] = Object.values(new WebSocketPair());\n      await this.handleSession(server, request);\n      \n      return new Response(null, {\n        status: 101,\n        webSocket: client,\n      });\n    }\n    \n    return new Response('Not found', { status: 404 });\n  }\n\n  async handleSession(websocket, request) {\n    websocket.accept();\n    const sessionId = crypto.randomUUID();\n    \n    this.sessions.set(sessionId, {\n      websocket,\n      playerId: null,\n      roomId: null,\n    });\n    \n    websocket.addEventListener('message', async (msg) => {\n      const data = JSON.parse(msg.data);\n      const session = this.sessions.get(sessionId);\n      \n      switch (data.type) {\n        case 'join':\n          session.playerId = data.playerId;\n          session.roomId = data.roomId;\n          \n          // Broadcast to room\n          this.broadcastToRoom(data.roomId, {\n            type: 'player-joined',\n            playerId: data.playerId,\n          }, sessionId);\n          break;\n          \n        case 'move':\n          // Broadcast moves to room\n          this.broadcastToRoom(session.roomId, {\n            type: 'move',\n            playerId: session.playerId,\n            row: data.row,\n            col: data.col,\n          }, sessionId);\n          break;\n      }\n    });\n    \n    websocket.addEventListener('close', () => {\n      const session = this.sessions.get(sessionId);\n      if (session?.roomId) {\n        this.broadcastToRoom(session.roomId, {\n          type: 'player-left',\n          playerId: session.playerId,\n        }, sessionId);\n      }\n      this.sessions.delete(sessionId);\n    });\n  }\n\n  broadcastToRoom(roomId, data, excludeSessionId) {\n    for (const [id, session] of this.sessions) {\n      if (session.roomId === roomId && id !== excludeSessionId) {\n        if (session.websocket.readyState === WebSocket.OPEN) {\n          session.websocket.send(JSON.stringify(data));\n        }\n      }\n    }\n  }\n}\n\nexport default {\n  fetch: router.handle,\n};"],
  "mappings": ";;;;AA2Ea,IAAAA,IAAS,wBAAA,EAIlBC,MAAAA,KAAO,IAAIC,QAAAA,IAAS,CAAA,GAAA,GAAOC,GAAAA,IAAyB,CAAE,OAExD,EACEC,WAAW,IAAIC,MAAM,CAAA,GAAI,EAEvBC,KAAK,CAACC,IAAaC,IAAcC,GAAsBC,MAC7C,YAARF,KAAmBC,EAASE,QAE5B,CAACC,OAAkBC,MACjBX,EAAOY,KACL,CACEN,GAAKO,cAAAA,GACLC,OAAO,KAAKN,KAAQT,KAAOW,IACxBK,QAAQ,cAAc,IAAA,GACtBA,QAAQ,qBAAqB,cAAA,EAC7BA,QAAQ,mBAAmB,qBAAA,EAC3BA,QAAQ,OAAO,KAAA,EACfA,QAAQ,YAAY,SAAA,MAAA,GAEvBJ,GACAH,CAAAA,CAAAA,KAECD,EAAAA,CAAAA,GAEXP,QAAAA,GAAAA,GACGC,IACHe,MAAAA,MAAaC,OAAyBC,IAAAA;AACpC,MAAIC,IAAUC,GAAOC,IAAM,IAAIC,IAAIL,GAAQI,GAAAA,GAAME,IAA6BN,GAAQM,QAAQ,EAAErB,WAAW,KAAA;AAG3G,WAAK,CAAKsB,IAAGC,EAAAA,KAAMJ,EAAIK;AACrBH,MAAMC,EAAAA,IAAKD,EAAMC,EAAAA,IAAM,CAAA,EAAgBG,OAAOJ,EAAMC,EAAAA,GAAIC,EAAAA,IAAKA;AAG/D,WAAK,CAAKG,IAAQC,IAAOlB,IAAUH,EAAAA,KAASR;AAC1C,SAAK4B,MAAUX,GAAQW,UAAoB,SAAVA,QAAqBR,IAAQC,EAAIS,SAASV,MAAMS,EAAAA,IAAS;AACxFZ,MAAAA,GAAQc,SAASX,EAAMY,UAAU,CAAA,GACjCf,GAAQP,QAAQF;AAChB,eAASyB,MAAWtB;AAClB,YAAqE,SAAhEQ,KAAAA,MAAiBc,GAAQhB,GAAQiB,SAASjB,IAAAA,GAAYC,EAAAA;AAAgB,iBAAOC;IACrF;AACJ,EAAA,IA7CiB;AEnET,IAAAgB,IACX,wBACEC,KAAS,6BACTC,MAEF,CAACC,IAAAA,EAAQC,SAAAA,KAAU,CAAA,GAAA,GAAOC,EAAAA,IAAS,CAAA,MAAA,WACjCF,MAAiD,eAA3BA,IAAMG,YAAYC,OACtCJ,KACA,IAAIK,SAASN,IAAYA,EAAUC,EAAAA,IAAQA,IAAM,EACnCC,SAAS,EACP,gBAAgBH,IAAAA,GACZG,GAAQK,UAENC,OAAOC,YAAYP,EAAAA,IACnBA,GAAAA,GAAAA,GAGLC,EAAAA,CAAAA,GAhBrB;AADW,ICNAO,IAAOZ,EAClB,mCACAa,KAAKC,SAAAA;ADIM,IINAC,IAAOC,EAClB,6BACAC,MAAAA;AJIW,IKNAC,IAAOF,EAAe,WAAA;ALMtB,IMNAG,IAAOH,EAAe,YAAA;ANMtB,IONAI,IAAMJ,EAAe,WAAA;APMrB,IQNAK,IAAOL,EAAe,YAAA;;;AKI5B,IAAM,cAAc;AAAA,EACzB,eAAe,CAAC,WAAW,WAAW,WAAW,WAAW,WAAW,SAAS;AAAA,EAChF,aAAa,CAAC,OAAO,SAAS,QAAQ,UAAU,UAAU,MAAM;AAAA,EAEhE,cAAc;AAAA,IACZ,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,WAAW;AAAA,MACX,iBAAiB;AAAA,MACjB,aAAa;AAAA,IACf;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,WAAW;AAAA,MACX,iBAAiB;AAAA,MACjB,aAAa;AAAA,IACf;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,WAAW;AAAA,MACX,iBAAiB;AAAA,MACjB,aAAa;AAAA,IACf;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,WAAW;AAAA,MACX,iBAAiB;AAAA,MACjB,aAAa;AAAA,IACf;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,WAAW;AAAA,MACX,iBAAiB;AAAA,MACjB,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EAEA,QAAQ;AAAA,IACN,SAAS,EAAE,MAAM,WAAW,MAAM,SAAS,mBAAmB,KAAK;AAAA,IACnE,QAAQ,EAAE,MAAM,qBAAsB,MAAM,UAAU,mBAAmB,EAAE,SAAS,GAAG,UAAU,EAAE,EAAE;AAAA,IACrG,QAAQ,EAAE,MAAM,eAAe,MAAM,UAAU,mBAAmB,EAAE,SAAS,GAAG,UAAU,EAAE,EAAE;AAAA,IAC9F,QAAQ,EAAE,MAAM,oBAAoB,MAAM,SAAS,mBAAmB,EAAE,WAAW,EAAE,EAAE;AAAA,IACvF,QAAQ,EAAE,MAAM,eAAe,MAAM,QAAQ,mBAAmB,EAAE,WAAW,KAAK,EAAE;AAAA,IACpF,QAAQ,EAAE,MAAM,mBAAoB,MAAM,UAAU,mBAAmB,EAAE,aAAa,EAAE,EAAE;AAAA,EAC5F;AACF;AAGO,SAAS,UAAU,MAAM;AAC9B,SAAO,KAAK,IAAI,SAAO,CAAC,GAAG,GAAG,CAAC;AACjC;AAFgB;AAIT,SAAS,aAAa,SAAS,aAAa;AACjD,UAAQ,UAAU,KAAK;AACzB;AAFgB;AAIT,SAAS,eAAe,MAAM;AACnC,MAAI,CAAC,QAAQ,CAAC,KAAK;AAAQ,WAAO;AAClC,QAAM,aAAa,KAAK,CAAC,EAAE,CAAC;AAC5B,SAAO,KAAK,MAAM,SAAO,IAAI,MAAM,UAAQ,SAAS,UAAU,CAAC;AACjE;AAJgB;AAOT,SAAS,oBAAoB,KAAK,KAAK,MAAM,aAAa;AAC/D,QAAM,SAAS,MAAM,IAAI,EAAE,KAAK,IAAI,EAAE,IAAI,MAAM,MAAM,IAAI,EAAE,KAAK,CAAC,CAAC;AAEnE,MAAI,aAAa;AAEf,aAAS,IAAI,KAAK,IAAI,GAAG,MAAM,CAAC,GAAG,KAAK,KAAK,IAAI,OAAO,GAAG,MAAM,CAAC,GAAG,KAAK;AACxE,eAASM,KAAI,KAAK,IAAI,GAAG,MAAM,CAAC,GAAGA,MAAK,KAAK,IAAI,OAAO,GAAG,MAAM,CAAC,GAAGA,MAAK;AACxE,eAAO,CAAC,EAAEA,EAAC,IAAI;AAAA,MACjB;AAAA,IACF;AAAA,EACF,OAAO;AAEL,WAAO,GAAG,EAAE,GAAG,IAAI;AACnB,UAAM,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AACpD,eAAW,QAAQ,CAAC,CAAC,IAAI,EAAE,MAAM;AAC/B,YAAM,SAAS,MAAM;AACrB,YAAM,SAAS,MAAM;AACrB,UAAI,UAAU,KAAK,SAAS,QAAQ,UAAU,KAAK,SAAS,MAAM;AAChE,eAAO,MAAM,EAAE,MAAM,IAAI;AAAA,MAC3B;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAxBgB;AA2BT,SAAS,UAAU,MAAM,KAAK,KAAK,YAAY,aAAa,aAAa;AAC9E,QAAM,UAAU,UAAU,IAAI;AAC9B,QAAM,OAAO,KAAK;AAClB,QAAM,UAAU,GAAG,OAAO;AAC1B,QAAM,cAAc,WAAW,IAAI,OAAO;AAE1C,QAAM,SAAS,oBAAoB,KAAK,KAAK,MAAM,WAAW;AAC9D,QAAM,eAAe,CAAC;AAEtB,WAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,aAASA,KAAI,GAAGA,KAAI,MAAMA,MAAK;AAC7B,YAAM,MAAM,GAAG,KAAKA;AACpB,UAAI,OAAO,CAAC,EAAEA,EAAC,KAAK,CAAC,YAAY,IAAI,GAAG,GAAG;AACzC,cAAM,WAAW,QAAQ,CAAC,EAAEA,EAAC;AAC7B,gBAAQ,CAAC,EAAEA,EAAC,IAAI,aAAa,UAAU,WAAW;AAClD,qBAAa,KAAK;AAAA,UAChB,KAAK;AAAA,UACL,KAAKA;AAAA,UACL;AAAA,UACA,UAAU,QAAQ,CAAC,EAAEA,EAAC;AAAA,QACxB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL,MAAM;AAAA,IACN;AAAA,IACA,aAAa;AAAA,EACf;AACF;AA9BgB;AAiChB,eAAsB,YAAY,aAAa,YAAY,aAAa,aAAa;AACnF,QAAM,YAAY,KAAK,IAAI;AAC3B,QAAM,UAAU,oBAAI,IAAI;AACxB,QAAM,QAAQ,CAAC,EAAE,OAAO,aAAa,MAAM,CAAC,EAAE,CAAC;AAC/C,QAAM,eAAe,wBAAC,MAAM,EAAE,IAAI,SAAO,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,GAAG,GAA1C;AACrB,QAAM,aAAa;AACnB,QAAM,YAAY;AAElB,MAAI,iBAAiB;AAErB,SAAO,MAAM,SAAS,KAAK,iBAAiB,YAAY;AACtD,UAAM,EAAE,OAAO,KAAK,IAAI,MAAM,MAAM;AACpC,UAAM,WAAW,aAAa,KAAK;AAEnC,QAAI,QAAQ,IAAI,QAAQ;AAAG;AAC3B,YAAQ,IAAI,QAAQ;AACpB;AAEA,QAAI,eAAe,KAAK,GAAG;AACzB,aAAO;AAAA,QACL,UAAU;AAAA,QACV,UAAU;AAAA,QACV;AAAA,QACA,QAAQ,KAAK,IAAI,IAAI;AAAA,MACvB;AAAA,IACF;AAEA,QAAI,KAAK,UAAU;AAAW;AAG9B,UAAM,OAAO,MAAM;AACnB,aAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,eAASA,KAAI,GAAGA,KAAI,MAAMA,MAAK;AAC7B,cAAM,MAAM,GAAG,KAAKA;AACpB,YAAI,CAAC,YAAY,IAAI,GAAG,GAAG;AACzB,gBAAM,SAAS,UAAU,OAAO,GAAGA,IAAG,YAAY,aAAa,WAAW;AAC1E,gBAAM,cAAc,aAAa,OAAO,IAAI;AAE5C,cAAI,CAAC,QAAQ,IAAI,WAAW,GAAG;AAC7B,kBAAM,KAAK;AAAA,cACT,OAAO,OAAO;AAAA,cACd,MAAM,CAAC,GAAG,MAAM,EAAE,KAAK,GAAG,KAAKA,GAAE,CAAC;AAAA,YACpC,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL,UAAU,CAAC;AAAA,IACX,UAAU;AAAA,IACV;AAAA,IACA,QAAQ,KAAK,IAAI,IAAI;AAAA,EACvB;AACF;AAvDsB;AA0DtB,eAAsB,eAAe,aAAa,QAAQ;AACxD,QAAM,SAAS,YAAY,aAAa,UAAU;AAClD,QAAM,EAAE,MAAM,cAAc,gBAAgB,iBAAiB,OAAO,IAAI;AAGxE,QAAM,aAAa,MAAM,IAAI,EAAE,KAAK,IAAI,EAAE,IAAI,MAAM,MAAM,IAAI,EAAE,KAAK,CAAC,CAAC;AAGvE,QAAM,aAAa,oBAAI,IAAI;AAC3B,QAAM,cAAc,oBAAI,IAAI;AAG5B,MAAI,kBAAkB,GAAG;AACvB,UAAM,gBAAgB,KAAK,IAAI,GAAG,KAAK,MAAM,OAAO,OAAO,eAAe,CAAC;AAC3E,WAAO,WAAW,OAAO,eAAe;AACtC,YAAM,IAAI,KAAK,MAAM,KAAK,OAAO,IAAI,IAAI;AACzC,YAAMA,KAAI,KAAK,MAAM,KAAK,OAAO,IAAI,IAAI;AACzC,iBAAW,IAAI,GAAG,KAAKA,IAAG;AAAA,IAC5B;AAAA,EACF;AAGA,SAAO,YAAY,OAAO,gBAAgB;AACxC,UAAM,IAAI,KAAK,MAAM,KAAK,OAAO,IAAI,IAAI;AACzC,UAAMA,KAAI,KAAK,MAAM,KAAK,OAAO,IAAI,IAAI;AACzC,UAAM,MAAM,GAAG,KAAKA;AACpB,QAAI,CAAC,WAAW,IAAI,GAAG,GAAG;AACxB,kBAAY,IAAI,KAAK,KAAK,MAAM,KAAK,OAAO,IAAI,CAAC,IAAI,CAAC;AAAA,IACxD;AAAA,EACF;AAGA,MAAI,cAAc,UAAU,UAAU;AACtC,QAAM,eAAe,CAAC;AAEtB,WAASC,KAAI,GAAGA,KAAI,cAAcA,MAAK;AAErC,UAAM,aAAa,CAAC;AACpB,aAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,eAASD,KAAI,GAAGA,KAAI,MAAMA,MAAK;AAC7B,YAAI,CAAC,YAAY,IAAI,GAAG,KAAKA,IAAG,GAAG;AACjC,qBAAW,KAAK,EAAE,KAAK,GAAG,KAAKA,GAAE,CAAC;AAAA,QACpC;AAAA,MACF;AAAA,IACF;AAGA,UAAM,OAAO,WAAW,KAAK,MAAM,KAAK,OAAO,IAAI,WAAW,MAAM,CAAC;AACrE,UAAM,SAAS,UAAU,aAAa,KAAK,KAAK,KAAK,KAAK,YAAY,oBAAI,IAAI,GAAG,MAAM;AACvF,kBAAc,OAAO;AACrB,iBAAa,KAAK,IAAI;AAAA,EACxB;AAGA,QAAM,WAAW,MAAM,YAAY,aAAa,YAAY,aAAa,MAAM;AAE/E,SAAO;AAAA,IACL,MAAM;AAAA,IACN;AAAA,IACA,YAAY,MAAM,KAAK,UAAU;AAAA,IACjC,aAAa,OAAO,YAAY,WAAW;AAAA,IAC3C,UAAU,SAAS;AAAA,IACnB;AAAA,IACA,UAAU,SAAS;AAAA,IACnB,gBAAgB,SAAS;AAAA,IACzB;AAAA,IACA;AAAA,EACF;AACF;AApEsB;;;ACzMtB,OAAO,kBAAkB;AAHzB,IAAM,SAAS,EAAO;AAItB,IAAM,WAAW,KAAK,MAAM,gBAAgB,IAAI;AAGhD,OAAO,KAAK,iBAAiB,OAAO,YAAY;AAC9C,QAAM,EAAE,aAAa,OAAO,IAAI,MAAM,QAAQ,KAAK;AACnD,QAAM,SAAS,MAAM,eAAe,UAAU;AAE9C,SAAO,IAAI,SAAS,KAAK,UAAU,MAAM,GAAG;AAAA,IAC1C,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,EAChD,CAAC;AACH,CAAC;AAED,OAAO,KAAK,cAAc,OAAO,YAAY;AAC3C,QAAM,EAAE,MAAM,OAAO,QAAQ,OAAO,IAAI,MAAM,QAAQ,KAAK;AAC3D,QAAM,WAAW,MAAM,YAAY,MAAM,OAAO,QAAQ,MAAM;AAE9D,SAAO,IAAI,SAAS,KAAK,UAAU,QAAQ,GAAG;AAAA,IAC5C,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,EAChD,CAAC;AACH,CAAC;AAED,OAAO,KAAK,aAAa,OAAO,YAAY;AAC1C,QAAM,EAAE,MAAM,KAAK,KAAK,OAAO,QAAQ,OAAO,IAAI,MAAM,QAAQ,KAAK;AACrE,QAAM,SAAS,UAAU,MAAM,KAAK,KAAK,OAAO,QAAQ,MAAM;AAC9D,QAAM,MAAM,eAAe,OAAO,IAAI;AAEtC,SAAO,IAAI,SAAS,KAAK,UAAU,EAAE,GAAG,QAAQ,IAAI,CAAC,GAAG;AAAA,IACtD,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,EAChD,CAAC;AACH,CAAC;AAED,OAAO,IAAI,gCAAgC,OAAO,SAAS,QAAQ;AACjE,QAAM,EAAE,WAAW,IAAI,QAAQ;AAC/B,QAAM,cAAc,MAAM,IAAI,WAAW,IAAI,eAAe,cAAc,EAAE,MAAM,OAAO,CAAC;AAE1F,SAAO,IAAI,SAAS,KAAK,UAAU,eAAe,CAAC,CAAC,GAAG;AAAA,IACrD,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,EAChD,CAAC;AACH,CAAC;AAED,OAAO,KAAK,cAAc,OAAO,SAAS,QAAQ;AAChD,QAAM,EAAE,MAAM,OAAO,OAAO,MAAM,WAAW,IAAI,MAAM,QAAQ,KAAK;AAEpE,QAAM,MAAM,eAAe;AAC3B,QAAM,cAAc,MAAM,IAAI,WAAW,IAAI,KAAK,EAAE,MAAM,OAAO,CAAC,KAAK,CAAC;AAExE,cAAY,KAAK;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW,KAAK,IAAI;AAAA,EACtB,CAAC;AAED,cAAY,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAC5C,cAAY,OAAO,GAAG;AAEtB,QAAM,IAAI,WAAW,IAAI,KAAK,KAAK,UAAU,WAAW,CAAC;AAEzD,SAAO,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,KAAK,CAAC,GAAG;AAAA,IACrD,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,EAChD,CAAC;AACH,CAAC;AAGD,OAAO,IAAI,MAAM,OAAO,SAAS,KAAK,QAAQ;AAC5C,QAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAG/B,MAAI,IAAI,gBAAgB,eAAe;AACrC,WAAO,MAAM,wBAAwB,IAAI,UAAU;AAAA,EACrD;AAGA,MAAI;AAEF,QAAI,QAAQ,MAAM,IAAI,iBAAiB,IAAI,IAAI,QAAQ;AAGvD,QAAI,CAAC,SAAS,CAAC,IAAI,SAAS,SAAS,GAAG,GAAG;AACzC,cAAQ,MAAM,IAAI,iBAAiB,IAAI,YAAY;AAAA,IACrD;AAEA,QAAI,OAAO;AACT,YAAM,UAAU;AAAA,QACd,gBAAgB,YAAY,IAAI,QAAQ;AAAA,QACxC,iBAAiB,IAAI,aAAa,gBAC9B,uCACA;AAAA,MACN;AAEA,aAAO,IAAI,SAAS,MAAM,MAAM,EAAE,QAAQ,CAAC;AAAA,IAC7C;AAAA,EACF,SAASE,IAAP;AACA,YAAQ,MAAM,wBAAwBA,EAAC;AAAA,EACzC;AAEA,SAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAClD,CAAC;AAED,SAAS,YAAY,UAAU;AAC7B,QAAM,MAAM,SAAS,MAAM,GAAG,EAAE,IAAI,GAAG,YAAY;AACnD,QAAM,QAAQ;AAAA,IACZ,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,OAAO;AAAA,IACP,OAAO;AAAA,EACT;AACA,SAAO,MAAM,GAAG,KAAK;AACvB;AAlBS;AAqBF,IAAM,cAAN,MAAkB;AAAA,EACvB,YAAY,OAAO,KAAK;AACtB,SAAK,QAAQ;AACb,SAAK,MAAM;AACX,SAAK,WAAW,oBAAI,IAAI;AAAA,EAC1B;AAAA,EAEA,MAAM,MAAM,SAAS;AACnB,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAE/B,QAAI,IAAI,aAAa,cAAc;AACjC,YAAM,gBAAgB,QAAQ,QAAQ,IAAI,SAAS;AACnD,UAAI,kBAAkB,aAAa;AACjC,eAAO,IAAI,SAAS,+BAA+B,EAAE,QAAQ,IAAI,CAAC;AAAA,MACpE;AAEA,YAAM,CAAC,QAAQ,MAAM,IAAI,OAAO,OAAO,IAAI,cAAc,CAAC;AAC1D,YAAM,KAAK,cAAc,QAAQ,OAAO;AAExC,aAAO,IAAI,SAAS,MAAM;AAAA,QACxB,QAAQ;AAAA,QACR,WAAW;AAAA,MACb,CAAC;AAAA,IACH;AAEA,WAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,EAClD;AAAA,EAEA,MAAM,cAAc,WAAW,SAAS;AACtC,cAAU,OAAO;AACjB,UAAM,YAAY,OAAO,WAAW;AAEpC,SAAK,SAAS,IAAI,WAAW;AAAA,MAC3B;AAAA,MACA,UAAU;AAAA,MACV,QAAQ;AAAA,IACV,CAAC;AAED,cAAU,iBAAiB,WAAW,OAAO,QAAQ;AACnD,YAAM,OAAO,KAAK,MAAM,IAAI,IAAI;AAChC,YAAM,UAAU,KAAK,SAAS,IAAI,SAAS;AAE3C,cAAQ,KAAK,MAAM;AAAA,QACjB,KAAK;AACH,kBAAQ,WAAW,KAAK;AACxB,kBAAQ,SAAS,KAAK;AAGtB,eAAK,gBAAgB,KAAK,QAAQ;AAAA,YAChC,MAAM;AAAA,YACN,UAAU,KAAK;AAAA,UACjB,GAAG,SAAS;AACZ;AAAA,QAEF,KAAK;AAEH,eAAK,gBAAgB,QAAQ,QAAQ;AAAA,YACnC,MAAM;AAAA,YACN,UAAU,QAAQ;AAAA,YAClB,KAAK,KAAK;AAAA,YACV,KAAK,KAAK;AAAA,UACZ,GAAG,SAAS;AACZ;AAAA,MACJ;AAAA,IACF,CAAC;AAED,cAAU,iBAAiB,SAAS,MAAM;AACxC,YAAM,UAAU,KAAK,SAAS,IAAI,SAAS;AAC3C,UAAI,SAAS,QAAQ;AACnB,aAAK,gBAAgB,QAAQ,QAAQ;AAAA,UACnC,MAAM;AAAA,UACN,UAAU,QAAQ;AAAA,QACpB,GAAG,SAAS;AAAA,MACd;AACA,WAAK,SAAS,OAAO,SAAS;AAAA,IAChC,CAAC;AAAA,EACH;AAAA,EAEA,gBAAgB,QAAQ,MAAM,kBAAkB;AAC9C,eAAW,CAAC,IAAI,OAAO,KAAK,KAAK,UAAU;AACzC,UAAI,QAAQ,WAAW,UAAU,OAAO,kBAAkB;AACxD,YAAI,QAAQ,UAAU,eAAe,UAAU,MAAM;AACnD,kBAAQ,UAAU,KAAK,KAAK,UAAU,IAAI,CAAC;AAAA,QAC7C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAvFa;AAyFb,IAAO,0BAAQ;AAAA,EACb,OAAO,OAAO;AAChB;",
  "names": ["Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "fetch", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "method", "regex", "pathname", "params", "groups", "handler", "proxy", "createResponse", "format", "transform", "body", "headers", "rest", "constructor", "name", "Response", "entries", "Object", "fromEntries", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp", "c", "i", "e"]
}
