{
  "version": 3,
  "sources": ["../node_modules/src/src/Router.ts", "../node_modules/src/src/StatusError.ts", "../node_modules/src/src/createResponse.ts", "../node_modules/src/src/json.ts", "../node_modules/src/src/error.ts", "../node_modules/src/src/status.ts", "../node_modules/src/src/text.ts", "../node_modules/src/src/html.ts", "../node_modules/src/src/jpeg.ts", "../node_modules/src/src/png.ts", "../node_modules/src/src/webp.ts", "../node_modules/src/src/withContent.ts", "../node_modules/src/src/withCookies.ts", "../node_modules/src/src/withParams.ts", "../node_modules/src/src/createCors.ts", "../src/game-logic.js", "../src/templates.js", "../src/worker.js"],
  "sourceRoot": "dist-worker",
  "sourcesContent": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "/**\r\n * Core game logic for Color Me Same\r\n * Pure functions that can run in both Worker and browser contexts\r\n */\r\n\r\n// Game configuration\r\nexport const GAME_CONFIG = {\r\n  COLOR_PALETTE: ['#FF4444', '#44DD44', '#4444FF', '#FFAA00', '#AA44FF', '#44DDDD'],\r\n  COLOR_NAMES: ['Red', 'Green', 'Blue', 'Orange', 'Purple', 'Cyan'],\r\n  \r\n  DIFFICULTIES: {\r\n    easy: {\r\n      size: 3,\r\n      colors: 3,\r\n      reverseSteps: 3,\r\n      maxMoves: 0,\r\n      maxLockedTiles: 0,\r\n      powerTileChance: 0,\r\n      timeLimit: 0,\r\n      tutorialEnabled: true,\r\n      description: 'Perfect for learning! No limits, full tutorial.',\r\n    },\r\n    medium: {\r\n      size: 4,\r\n      colors: 4,\r\n      reverseSteps: 5,\r\n      maxMoves: 25,\r\n      maxLockedTiles: 1,\r\n      powerTileChance: 0.1,\r\n      timeLimit: 0,\r\n      tutorialEnabled: false,\r\n      description: 'More complex puzzles with special tiles.',\r\n    },\r\n    hard: {\r\n      size: 5,\r\n      colors: 4,\r\n      reverseSteps: 7,\r\n      maxMoves: 35,\r\n      maxLockedTiles: 2,\r\n      powerTileChance: 0.15,\r\n      timeLimit: 600,\r\n      tutorialEnabled: false,\r\n      description: 'Advanced puzzles with time challenge.',\r\n    },\r\n    expert: {\r\n      size: 6,\r\n      colors: 5,\r\n      reverseSteps: 10,\r\n      maxMoves: 50,\r\n      maxLockedTiles: 3,\r\n      powerTileChance: 0.2,\r\n      timeLimit: 480,\r\n      tutorialEnabled: false,\r\n      description: 'For puzzle masters only!',\r\n    },\r\n    infinite: {\r\n      size: 5,\r\n      colors: 6,\r\n      reverseSteps: 15,\r\n      maxMoves: 0,\r\n      maxLockedTiles: 4,\r\n      powerTileChance: 0.25,\r\n      timeLimit: 0,\r\n      tutorialEnabled: false,\r\n      description: 'Endless challenge mode.',\r\n    }\r\n  },\r\n  \r\n  WORLDS: {\r\n    sandbox: { name: 'Sandbox', belt: 'white', unlockRequirement: null },\r\n    world1: { name: 'Beginner\\'s Garden', belt: 'yellow', unlockRequirement: { puzzles: 5, minStars: 1 } },\r\n    world2: { name: 'Power Plaza', belt: 'orange', unlockRequirement: { puzzles: 3, minStars: 2 } },\r\n    world3: { name: 'Reflection Ridge', belt: 'green', unlockRequirement: { goldStars: 1 } },\r\n    world4: { name: 'Time Temple', belt: 'blue', unlockRequirement: { allSilver: true } },\r\n    world5: { name: 'Master\\'s Domain', belt: 'purple', unlockRequirement: { dailyStreak: 1 } }\r\n  }\r\n};\r\n\r\n// Helper functions\r\nexport function deepClone(grid) {\r\n  return grid.map(row => [...row]);\r\n}\r\n\r\nexport function getNextColor(current, totalColors) {\r\n  return (current + 1) % totalColors;\r\n}\r\n\r\nexport function isWinningState(grid) {\r\n  if (!grid || !grid.length) return false;\r\n  const firstColor = grid[0][0];\r\n  return grid.every(row => row.every(cell => cell === firstColor));\r\n}\r\n\r\n// Calculate effect matrix for a move\r\nexport function calculateMoveEffect(row, col, size, isPowerTile) {\r\n  const effect = Array(size).fill(null).map(() => Array(size).fill(0));\r\n  \r\n  if (isPowerTile) {\r\n    // Power tiles affect 3x3 area\r\n    for (let r = Math.max(0, row - 1); r <= Math.min(size - 1, row + 1); r++) {\r\n      for (let c = Math.max(0, col - 1); c <= Math.min(size - 1, col + 1); c++) {\r\n        effect[r][c] = 1;\r\n      }\r\n    }\r\n  } else {\r\n    // Normal tiles affect cross pattern\r\n    effect[row][col] = 1;\r\n    const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\r\n    directions.forEach(([dr, dc]) => {\r\n      const newRow = row + dr;\r\n      const newCol = col + dc;\r\n      if (newRow >= 0 && newRow < size && newCol >= 0 && newCol < size) {\r\n        effect[newRow][newCol] = 1;\r\n      }\r\n    });\r\n  }\r\n  \r\n  return effect;\r\n}\r\n\r\n// Apply a move to the grid\r\nexport function applyMove(grid, row, col, powerTiles, lockedTiles, totalColors) {\r\n  const newGrid = deepClone(grid);\r\n  const size = grid.length;\r\n  const tileKey = `${row}-${col}`;\r\n  const isPowerTile = powerTiles.has(tileKey);\r\n  \r\n  const effect = calculateMoveEffect(row, col, size, isPowerTile);\r\n  const changedTiles = [];\r\n  \r\n  for (let r = 0; r < size; r++) {\r\n    for (let c = 0; c < size; c++) {\r\n      const key = `${r}-${c}`;\r\n      if (effect[r][c] && !lockedTiles.has(key)) {\r\n        const oldColor = newGrid[r][c];\r\n        newGrid[r][c] = getNextColor(oldColor, totalColors);\r\n        changedTiles.push({\r\n          row: r,\r\n          col: c,\r\n          oldColor,\r\n          newColor: newGrid[r][c]\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    grid: newGrid,\r\n    changedTiles,\r\n    isPowerMove: isPowerTile\r\n  };\r\n}\r\n\r\n// BFS solver with memoization\r\nexport async function solvePuzzle(initialGrid, powerTiles, lockedTiles, totalColors) {\r\n  const startTime = Date.now();\r\n  const visited = new Set();\r\n  const queue = [{ state: initialGrid, path: [] }];\r\n  const gridToString = (g) => g.map(row => row.join('')).join('|');\r\n  const MAX_STATES = 10000;\r\n  const MAX_DEPTH = 30;\r\n  \r\n  let statesExplored = 0;\r\n  \r\n  while (queue.length > 0 && statesExplored < MAX_STATES) {\r\n    const { state, path } = queue.shift();\r\n    const stateKey = gridToString(state);\r\n    \r\n    if (visited.has(stateKey)) continue;\r\n    visited.add(stateKey);\r\n    statesExplored++;\r\n    \r\n    if (isWinningState(state)) {\r\n      return {\r\n        solution: path,\r\n        solvable: true,\r\n        statesExplored,\r\n        timeMs: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    if (path.length >= MAX_DEPTH) continue;\r\n    \r\n    // Try all possible moves\r\n    const size = state.length;\r\n    for (let r = 0; r < size; r++) {\r\n      for (let c = 0; c < size; c++) {\r\n        const key = `${r}-${c}`;\r\n        if (!lockedTiles.has(key)) {\r\n          const result = applyMove(state, r, c, powerTiles, lockedTiles, totalColors);\r\n          const newStateKey = gridToString(result.grid);\r\n          \r\n          if (!visited.has(newStateKey)) {\r\n            queue.push({\r\n              state: result.grid,\r\n              path: [...path, { row: r, col: c }]\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    solution: [],\r\n    solvable: false,\r\n    statesExplored,\r\n    timeMs: Date.now() - startTime\r\n  };\r\n}\r\n\r\n// Generate a puzzle by reverse moves\r\nexport async function generatePuzzle(difficulty = 'easy') {\r\n  const config = GAME_CONFIG.DIFFICULTIES[difficulty];\r\n  const { size, reverseSteps, maxLockedTiles, powerTileChance, colors } = config;\r\n  \r\n  // Start with solved grid (all zeros)\r\n  const solvedGrid = Array(size).fill(null).map(() => Array(size).fill(0));\r\n  \r\n  // Generate special tiles\r\n  const powerTiles = new Set();\r\n  const lockedTiles = new Map();\r\n  \r\n  // Add power tiles\r\n  if (powerTileChance > 0) {\r\n    const numPowerTiles = Math.min(3, Math.floor(size * size * powerTileChance));\r\n    while (powerTiles.size < numPowerTiles) {\r\n      const r = Math.floor(Math.random() * size);\r\n      const c = Math.floor(Math.random() * size);\r\n      powerTiles.add(`${r}-${c}`);\r\n    }\r\n  }\r\n  \r\n  // Add locked tiles\r\n  while (lockedTiles.size < maxLockedTiles) {\r\n    const r = Math.floor(Math.random() * size);\r\n    const c = Math.floor(Math.random() * size);\r\n    const key = `${r}-${c}`;\r\n    if (!powerTiles.has(key)) {\r\n      lockedTiles.set(key, Math.floor(Math.random() * 3) + 2); // 2-4 moves to unlock\r\n    }\r\n  }\r\n  \r\n  // Apply reverse moves to create puzzle\r\n  let currentGrid = deepClone(solvedGrid);\r\n  const reverseMoves = [];\r\n  \r\n  for (let i = 0; i < reverseSteps; i++) {\r\n    // Find all valid moves\r\n    const validMoves = [];\r\n    for (let r = 0; r < size; r++) {\r\n      for (let c = 0; c < size; c++) {\r\n        if (!lockedTiles.has(`${r}-${c}`)) {\r\n          validMoves.push({ row: r, col: c });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Pick random move\r\n    const move = validMoves[Math.floor(Math.random() * validMoves.length)];\r\n    const result = applyMove(currentGrid, move.row, move.col, powerTiles, new Map(), colors);\r\n    currentGrid = result.grid;\r\n    reverseMoves.push(move);\r\n  }\r\n  \r\n  // Verify puzzle is solvable\r\n  const solution = await solvePuzzle(currentGrid, powerTiles, lockedTiles, colors);\r\n  \r\n  return {\r\n    grid: currentGrid,\r\n    solvedGrid,\r\n    powerTiles: Array.from(powerTiles),\r\n    lockedTiles: Object.fromEntries(lockedTiles),\r\n    solution: solution.solution,\r\n    reverseMoves,\r\n    verified: solution.solvable,\r\n    statesExplored: solution.statesExplored,\r\n    difficulty,\r\n    config\r\n  };\r\n}\r\n\r\n// Calculate score\r\nexport function calculateScore(moves, optimalMoves, timeSeconds, timeLimit, difficulty) {\r\n  const baseScore = 1000;\r\n  const efficiencyBonus = optimalMoves ? Math.round((optimalMoves / moves) * 100) * 10 : 0;\r\n  const timeBonus = timeLimit ? Math.max(0, (timeLimit - timeSeconds) * 5) : 500;\r\n  \r\n  const difficultyMultiplier = {\r\n    easy: 1,\r\n    medium: 1.5,\r\n    hard: 2,\r\n    expert: 3,\r\n    infinite: 4\r\n  }[difficulty] || 1;\r\n  \r\n  return Math.round((baseScore + efficiencyBonus + timeBonus) * difficultyMultiplier);\r\n}\r\n\r\n// Daily puzzle seed generation\r\nexport function getDailySeed() {\r\n  const today = new Date();\r\n  const dateString = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;\r\n  \r\n  // Simple hash function for consistent daily seeds\r\n  let hash = 0;\r\n  for (let i = 0; i < dateString.length; i++) {\r\n    const char = dateString.charCodeAt(i);\r\n    hash = ((hash << 5) - hash) + char;\r\n    hash = hash & hash; // Convert to 32-bit integer\r\n  }\r\n  \r\n  return Math.abs(hash);\r\n}", "/**\r\n * HTML template for the game\r\n */\r\n\r\nexport const html = `<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Color Me Same - Puzzle Game</title>\r\n  <meta name=\"description\" content=\"A challenging puzzle game where you make all tiles the same color\">\r\n  <link rel=\"manifest\" href=\"/manifest.json\">\r\n  <style>\r\n    * { box-sizing: border-box; margin: 0; padding: 0; }\r\n    \r\n    body {\r\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      min-height: 100vh;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: 1rem;\r\n      color: white;\r\n    }\r\n    \r\n    .game-container {\r\n      max-width: 600px;\r\n      width: 100%;\r\n      background: rgba(0, 0, 0, 0.2);\r\n      border-radius: 20px;\r\n      padding: 2rem;\r\n      backdrop-filter: blur(10px);\r\n    }\r\n    \r\n    h1 {\r\n      text-align: center;\r\n      margin-bottom: 1rem;\r\n      font-size: 2.5rem;\r\n      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\r\n    }\r\n    \r\n    .dashboard {\r\n      display: grid;\r\n      grid-template-columns: repeat(4, 1fr);\r\n      gap: 1rem;\r\n      margin-bottom: 2rem;\r\n      background: rgba(0, 0, 0, 0.3);\r\n      padding: 1rem;\r\n      border-radius: 10px;\r\n    }\r\n    \r\n    .stat {\r\n      text-align: center;\r\n    }\r\n    \r\n    .stat-value {\r\n      font-size: 1.5rem;\r\n      font-weight: bold;\r\n    }\r\n    \r\n    .stat-label {\r\n      font-size: 0.875rem;\r\n      opacity: 0.8;\r\n    }\r\n    \r\n    .game-board {\r\n      display: grid;\r\n      gap: 0.5rem;\r\n      margin-bottom: 2rem;\r\n      background: rgba(0, 0, 0, 0.3);\r\n      padding: 1rem;\r\n      border-radius: 10px;\r\n    }\r\n    \r\n    .tile {\r\n      aspect-ratio: 1;\r\n      border: none;\r\n      border-radius: 8px;\r\n      cursor: pointer;\r\n      transition: all 0.2s ease;\r\n      position: relative;\r\n      overflow: hidden;\r\n    }\r\n    \r\n    .tile:hover {\r\n      transform: scale(1.05);\r\n    }\r\n    \r\n    .tile:active {\r\n      transform: scale(0.95);\r\n    }\r\n    \r\n    .tile.locked {\r\n      cursor: not-allowed;\r\n      opacity: 0.6;\r\n    }\r\n    \r\n    .tile.power::after {\r\n      content: '\u26A1';\r\n      position: absolute;\r\n      top: 2px;\r\n      right: 2px;\r\n      font-size: 0.875rem;\r\n    }\r\n    \r\n    .tile.locked::after {\r\n      content: '\uD83D\uDD12';\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      font-size: 1.5rem;\r\n    }\r\n    \r\n    .power-ups {\r\n      display: grid;\r\n      grid-template-columns: repeat(3, 1fr);\r\n      gap: 1rem;\r\n      margin-bottom: 2rem;\r\n    }\r\n    \r\n    .power-up {\r\n      background: rgba(0, 0, 0, 0.3);\r\n      border: 2px solid rgba(255, 255, 255, 0.2);\r\n      color: white;\r\n      padding: 1rem;\r\n      border-radius: 10px;\r\n      cursor: pointer;\r\n      transition: all 0.2s ease;\r\n      text-align: center;\r\n    }\r\n    \r\n    .power-up:hover:not(:disabled) {\r\n      background: rgba(255, 255, 255, 0.2);\r\n      transform: translateY(-2px);\r\n    }\r\n    \r\n    .power-up:disabled {\r\n      opacity: 0.5;\r\n      cursor: not-allowed;\r\n    }\r\n    \r\n    .power-up-icon {\r\n      font-size: 1.5rem;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n    \r\n    .controls {\r\n      display: flex;\r\n      gap: 1rem;\r\n      justify-content: center;\r\n    }\r\n    \r\n    button {\r\n      background: rgba(255, 255, 255, 0.2);\r\n      border: 2px solid rgba(255, 255, 255, 0.3);\r\n      color: white;\r\n      padding: 0.75rem 1.5rem;\r\n      border-radius: 8px;\r\n      font-size: 1rem;\r\n      cursor: pointer;\r\n      transition: all 0.2s ease;\r\n    }\r\n    \r\n    button:hover {\r\n      background: rgba(255, 255, 255, 0.3);\r\n      transform: translateY(-2px);\r\n    }\r\n    \r\n    .modal {\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      background: rgba(0, 0, 0, 0.8);\r\n      display: none;\r\n      align-items: center;\r\n      justify-content: center;\r\n      z-index: 1000;\r\n    }\r\n    \r\n    .modal.active {\r\n      display: flex;\r\n    }\r\n    \r\n    .modal-content {\r\n      background: white;\r\n      color: #333;\r\n      padding: 2rem;\r\n      border-radius: 20px;\r\n      max-width: 400px;\r\n      width: 90%;\r\n      text-align: center;\r\n    }\r\n    \r\n    .victory-emoji {\r\n      font-size: 4rem;\r\n      margin-bottom: 1rem;\r\n    }\r\n    \r\n    .loading {\r\n      text-align: center;\r\n      padding: 2rem;\r\n    }\r\n    \r\n    .spinner {\r\n      border: 3px solid rgba(255, 255, 255, 0.3);\r\n      border-radius: 50%;\r\n      border-top: 3px solid white;\r\n      width: 40px;\r\n      height: 40px;\r\n      animation: spin 1s linear infinite;\r\n      margin: 0 auto;\r\n    }\r\n    \r\n    @keyframes spin {\r\n      0% { transform: rotate(0deg); }\r\n      100% { transform: rotate(360deg); }\r\n    }\r\n    \r\n    .tile-change {\r\n      animation: tileFlip 0.3s ease;\r\n    }\r\n    \r\n    @keyframes tileFlip {\r\n      0% { transform: rotateY(0deg); }\r\n      50% { transform: rotateY(90deg); }\r\n      100% { transform: rotateY(0deg); }\r\n    }\r\n    \r\n    @media (max-width: 480px) {\r\n      .game-container {\r\n        padding: 1rem;\r\n      }\r\n      \r\n      h1 {\r\n        font-size: 1.75rem;\r\n      }\r\n      \r\n      .dashboard {\r\n        grid-template-columns: repeat(2, 1fr);\r\n      }\r\n    }\r\n    \r\n    /* Accessibility */\r\n    @media (prefers-reduced-motion: reduce) {\r\n      * {\r\n        animation-duration: 0.01ms !important;\r\n        animation-iteration-count: 1 !important;\r\n        transition-duration: 0.01ms !important;\r\n      }\r\n    }\r\n    \r\n    .sr-only {\r\n      position: absolute;\r\n      width: 1px;\r\n      height: 1px;\r\n      padding: 0;\r\n      margin: -1px;\r\n      overflow: hidden;\r\n      clip: rect(0, 0, 0, 0);\r\n      white-space: nowrap;\r\n      border-width: 0;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <div class=\"game-container\">\r\n    <h1>Color Me Same</h1>\r\n    \r\n    <div id=\"menu\" class=\"menu\">\r\n      <h2>Choose Difficulty</h2>\r\n      <div class=\"difficulty-buttons\">\r\n        <button onclick=\"startGame('easy')\">Easy (3x3)</button>\r\n        <button onclick=\"startGame('medium')\">Medium (4x4)</button>\r\n        <button onclick=\"startGame('hard')\">Hard (5x5)</button>\r\n        <button onclick=\"startGame('expert')\">Expert (6x6)</button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div id=\"game\" style=\"display: none;\">\r\n      <div class=\"dashboard\">\r\n        <div class=\"stat\">\r\n          <div class=\"stat-value\" id=\"moves\">0</div>\r\n          <div class=\"stat-label\">Moves</div>\r\n        </div>\r\n        <div class=\"stat\">\r\n          <div class=\"stat-value\" id=\"time\">0:00</div>\r\n          <div class=\"stat-label\">Time</div>\r\n        </div>\r\n        <div class=\"stat\">\r\n          <div class=\"stat-value\" id=\"score\">0</div>\r\n          <div class=\"stat-label\">Score</div>\r\n        </div>\r\n        <div class=\"stat\">\r\n          <div class=\"stat-value\" id=\"difficulty\">Easy</div>\r\n          <div class=\"stat-label\">Level</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"game-board\" id=\"board\"></div>\r\n      \r\n      <div class=\"power-ups\">\r\n        <button class=\"power-up\" id=\"wildcard\" onclick=\"usePowerUp('wildcard')\">\r\n          <div class=\"power-up-icon\">\uD83C\uDFB2</div>\r\n          <div>Wildcard</div>\r\n        </button>\r\n        <button class=\"power-up\" id=\"freeze\" onclick=\"usePowerUp('freeze')\">\r\n          <div class=\"power-up-icon\">\u2744\uFE0F</div>\r\n          <div>Freeze</div>\r\n        </button>\r\n        <button class=\"power-up\" id=\"reset\" onclick=\"usePowerUp('reset')\">\r\n          <div class=\"power-up-icon\">\u21A9\uFE0F</div>\r\n          <div>Reset</div>\r\n        </button>\r\n      </div>\r\n      \r\n      <div class=\"controls\">\r\n        <button onclick=\"showHint()\">\uD83D\uDCA1 Hint</button>\r\n        <button onclick=\"showSolution()\">\uD83C\uDFAF Solution</button>\r\n        <button onclick=\"newGame()\">\uD83D\uDD04 New Game</button>\r\n        <button onclick=\"backToMenu()\">\uD83C\uDFE0 Menu</button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div id=\"loading\" class=\"loading\" style=\"display: none;\">\r\n      <div class=\"spinner\"></div>\r\n      <p>Generating puzzle...</p>\r\n    </div>\r\n  </div>\r\n  \r\n  <div id=\"victoryModal\" class=\"modal\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"victory-emoji\">\uD83C\uDF89</div>\r\n      <h2>Puzzle Solved!</h2>\r\n      <p id=\"victoryStats\"></p>\r\n      <button onclick=\"newGame()\">New Puzzle</button>\r\n      <button onclick=\"backToMenu()\">Back to Menu</button>\r\n    </div>\r\n  </div>\r\n  \r\n  <script>\r\n    // Game state\r\n    let gameState = {\r\n      grid: [],\r\n      moves: 0,\r\n      time: 0,\r\n      score: 0,\r\n      difficulty: 'easy',\r\n      powerTiles: [],\r\n      lockedTiles: {},\r\n      solution: [],\r\n      config: {},\r\n      gameActive: false,\r\n      timer: null\r\n    };\r\n    \r\n    // Initialize game\r\n    async function startGame(difficulty) {\r\n      document.getElementById('menu').style.display = 'none';\r\n      document.getElementById('loading').style.display = 'block';\r\n      \r\n      try {\r\n        const response = await fetch('/api/generate', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ difficulty })\r\n        });\r\n        \r\n        const puzzle = await response.json();\r\n        \r\n        gameState = {\r\n          ...gameState,\r\n          grid: puzzle.grid,\r\n          difficulty: difficulty,\r\n          powerTiles: puzzle.powerTiles,\r\n          lockedTiles: puzzle.lockedTiles,\r\n          solution: puzzle.solution,\r\n          config: puzzle.config,\r\n          moves: 0,\r\n          time: 0,\r\n          score: 0,\r\n          gameActive: true\r\n        };\r\n        \r\n        document.getElementById('loading').style.display = 'none';\r\n        document.getElementById('game').style.display = 'block';\r\n        document.getElementById('difficulty').textContent = difficulty.charAt(0).toUpperCase() + difficulty.slice(1);\r\n        \r\n        renderBoard();\r\n        startTimer();\r\n      } catch (error) {\r\n        console.error('Failed to generate puzzle:', error);\r\n        document.getElementById('loading').style.display = 'none';\r\n        document.getElementById('menu').style.display = 'block';\r\n      }\r\n    }\r\n    \r\n    // Render game board\r\n    function renderBoard() {\r\n      const board = document.getElementById('board');\r\n      const size = gameState.grid.length;\r\n      board.style.gridTemplateColumns = \\`repeat(\\${size}, 1fr)\\`;\r\n      board.innerHTML = '';\r\n      \r\n      for (let r = 0; r < size; r++) {\r\n        for (let c = 0; c < size; c++) {\r\n          const tile = document.createElement('button');\r\n          tile.className = 'tile';\r\n          tile.style.backgroundColor = getColorForValue(gameState.grid[r][c]);\r\n          \r\n          const key = \\`\\${r}-\\${c}\\`;\r\n          if (gameState.powerTiles.includes(key)) {\r\n            tile.classList.add('power');\r\n          }\r\n          if (gameState.lockedTiles[key]) {\r\n            tile.classList.add('locked');\r\n          }\r\n          \r\n          tile.onclick = () => handleTileClick(r, c);\r\n          board.appendChild(tile);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Handle tile click\r\n    async function handleTileClick(row, col) {\r\n      if (!gameState.gameActive) return;\r\n      \r\n      const key = \\`\\${row}-\\${col}\\`;\r\n      if (gameState.lockedTiles[key]) return;\r\n      \r\n      try {\r\n        const response = await fetch('/api/move', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            grid: gameState.grid,\r\n            row,\r\n            col,\r\n            power: new Set(gameState.powerTiles),\r\n            locked: new Map(Object.entries(gameState.lockedTiles)),\r\n            colors: gameState.config.colors\r\n          })\r\n        });\r\n        \r\n        const result = await response.json();\r\n        \r\n        gameState.grid = result.grid;\r\n        gameState.moves++;\r\n        document.getElementById('moves').textContent = gameState.moves;\r\n        \r\n        // Animate changed tiles\r\n        animateTileChanges(result.changedTiles);\r\n        \r\n        // Update locked tiles\r\n        for (const [k, v] of Object.entries(gameState.lockedTiles)) {\r\n          if (v > 1) {\r\n            gameState.lockedTiles[k] = v - 1;\r\n          } else {\r\n            delete gameState.lockedTiles[k];\r\n          }\r\n        }\r\n        \r\n        renderBoard();\r\n        \r\n        if (result.won) {\r\n          endGame();\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to apply move:', error);\r\n      }\r\n    }\r\n    \r\n    // Animate tile changes\r\n    function animateTileChanges(changedTiles) {\r\n      changedTiles.forEach(({ row, col }) => {\r\n        const index = row * gameState.grid.length + col;\r\n        const tiles = document.querySelectorAll('.tile');\r\n        if (tiles[index]) {\r\n          tiles[index].classList.add('tile-change');\r\n          setTimeout(() => tiles[index].classList.remove('tile-change'), 300);\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Timer\r\n    function startTimer() {\r\n      gameState.timer = setInterval(() => {\r\n        gameState.time++;\r\n        const minutes = Math.floor(gameState.time / 60);\r\n        const seconds = gameState.time % 60;\r\n        document.getElementById('time').textContent = \\`\\${minutes}:\\${seconds.toString().padStart(2, '0')}\\`;\r\n        \r\n        // Check time limit\r\n        if (gameState.config.timeLimit && gameState.time >= gameState.config.timeLimit) {\r\n          endGame();\r\n        }\r\n      }, 1000);\r\n    }\r\n    \r\n    // End game\r\n    async function endGame() {\r\n      gameState.gameActive = false;\r\n      clearInterval(gameState.timer);\r\n      \r\n      // Calculate score\r\n      const score = calculateScore();\r\n      gameState.score = score;\r\n      document.getElementById('score').textContent = score;\r\n      \r\n      // Show victory modal\r\n      const stats = \\`\r\n        Moves: \\${gameState.moves}<br>\r\n        Optimal: \\${gameState.solution.length}<br>\r\n        Time: \\${Math.floor(gameState.time / 60)}:\\${(gameState.time % 60).toString().padStart(2, '0')}<br>\r\n        Score: \\${score}\r\n      \\`;\r\n      document.getElementById('victoryStats').innerHTML = stats;\r\n      document.getElementById('victoryModal').classList.add('active');\r\n      \r\n      // Submit score to leaderboard\r\n      try {\r\n        await fetch('/api/score', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            name: 'Player',\r\n            score,\r\n            moves: gameState.moves,\r\n            time: gameState.time,\r\n            difficulty: gameState.difficulty\r\n          })\r\n        });\r\n      } catch (error) {\r\n        console.error('Failed to submit score:', error);\r\n      }\r\n    }\r\n    \r\n    // Calculate score\r\n    function calculateScore() {\r\n      const baseScore = 1000;\r\n      const efficiencyBonus = gameState.solution.length \r\n        ? Math.round((gameState.solution.length / gameState.moves) * 100) * 10 \r\n        : 0;\r\n      const timeBonus = gameState.config.timeLimit \r\n        ? Math.max(0, (gameState.config.timeLimit - gameState.time) * 5)\r\n        : 500;\r\n      \r\n      const difficultyMultiplier = {\r\n        easy: 1,\r\n        medium: 1.5,\r\n        hard: 2,\r\n        expert: 3\r\n      }[gameState.difficulty] || 1;\r\n      \r\n      return Math.round((baseScore + efficiencyBonus + timeBonus) * difficultyMultiplier);\r\n    }\r\n    \r\n    // Power-ups\r\n    function usePowerUp(type) {\r\n      // Implement power-up logic\r\n      console.log('Power-up:', type);\r\n    }\r\n    \r\n    // Show hint\r\n    function showHint() {\r\n      if (gameState.solution.length > 0) {\r\n        const nextMove = gameState.solution[0];\r\n        const index = nextMove.row * gameState.grid.length + nextMove.col;\r\n        const tiles = document.querySelectorAll('.tile');\r\n        if (tiles[index]) {\r\n          tiles[index].style.boxShadow = '0 0 20px yellow';\r\n          setTimeout(() => tiles[index].style.boxShadow = '', 2000);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Show solution\r\n    function showSolution() {\r\n      console.log('Solution:', gameState.solution);\r\n    }\r\n    \r\n    // New game\r\n    function newGame() {\r\n      document.getElementById('victoryModal').classList.remove('active');\r\n      startGame(gameState.difficulty);\r\n    }\r\n    \r\n    // Back to menu\r\n    function backToMenu() {\r\n      clearInterval(gameState.timer);\r\n      gameState.gameActive = false;\r\n      document.getElementById('game').style.display = 'none';\r\n      document.getElementById('victoryModal').classList.remove('active');\r\n      document.getElementById('menu').style.display = 'block';\r\n    }\r\n    \r\n    // Helper: Get color for value\r\n    function getColorForValue(value) {\r\n      const colors = ['#FF4444', '#44DD44', '#4444FF', '#FFAA00', '#AA44FF', '#44DDDD'];\r\n      return colors[value] || '#000000';\r\n    }\r\n  </script>\r\n</body>\r\n</html>`;\r\n\r\nexport const manifest = {\r\n  \"name\": \"Color Me Same\",\r\n  \"short_name\": \"ColorMeSame\",\r\n  \"description\": \"A challenging puzzle game where you make all tiles the same color\",\r\n  \"start_url\": \"/\",\r\n  \"display\": \"standalone\",\r\n  \"background_color\": \"#667eea\",\r\n  \"theme_color\": \"#667eea\",\r\n  \"icons\": [\r\n    {\r\n      \"src\": \"/icon-192.png\",\r\n      \"sizes\": \"192x192\",\r\n      \"type\": \"image/png\"\r\n    },\r\n    {\r\n      \"src\": \"/icon-512.png\",\r\n      \"sizes\": \"512x512\",\r\n      \"type\": \"image/png\"\r\n    }\r\n  ]\r\n};", "/**\r\n * Color Me Same - Cloudflare Worker\r\n * A puzzle game with server-side game logic and BFS solver\r\n */\r\n\r\nimport { Router } from 'itty-router';\r\nimport { generatePuzzle, solvePuzzle, applyMove, isWinningState } from './game-logic.js';\r\nimport { html } from './templates.js';\r\n\r\nconst router = Router();\r\n\r\n// Serve the main game HTML\r\nrouter.get('/', () => {\r\n  return new Response(html, {\r\n    headers: {\r\n      'Content-Type': 'text/html;charset=UTF-8',\r\n      'Cache-Control': 'public, max-age=3600',\r\n    },\r\n  });\r\n});\r\n\r\n// API: Generate new puzzle\r\nrouter.post('/api/generate', async (request) => {\r\n  const { difficulty = 'easy' } = await request.json();\r\n  \r\n  const puzzle = await generatePuzzle(difficulty);\r\n  \r\n  return new Response(JSON.stringify(puzzle), {\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n});\r\n\r\n// API: Solve puzzle (BFS solver)\r\nrouter.post('/api/solve', async (request) => {\r\n  const { grid, power, locked, colors } = await request.json();\r\n  \r\n  // Run solver in the Worker (could also use Durable Object for complex cases)\r\n  const solution = await solvePuzzle(grid, power, locked, colors);\r\n  \r\n  return new Response(JSON.stringify(solution), {\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n});\r\n\r\n// API: Apply move\r\nrouter.post('/api/move', async (request) => {\r\n  const { grid, row, col, power, locked, colors } = await request.json();\r\n  \r\n  const result = applyMove(grid, row, col, power, locked, colors);\r\n  const won = isWinningState(result.grid);\r\n  \r\n  return new Response(JSON.stringify({ ...result, won }), {\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n});\r\n\r\n// API: Get leaderboard\r\nrouter.get('/api/leaderboard/:difficulty', async (request, env) => {\r\n  const { difficulty } = request.params;\r\n  \r\n  const leaderboard = await env.GAME_STATE.get(`leaderboard:${difficulty}`, { type: 'json' });\r\n  \r\n  return new Response(JSON.stringify(leaderboard || []), {\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n});\r\n\r\n// API: Submit score\r\nrouter.post('/api/score', async (request, env) => {\r\n  const { name, score, moves, time, difficulty } = await request.json();\r\n  \r\n  const key = `leaderboard:${difficulty}`;\r\n  const leaderboard = await env.GAME_STATE.get(key, { type: 'json' }) || [];\r\n  \r\n  leaderboard.push({\r\n    name,\r\n    score,\r\n    moves,\r\n    time,\r\n    timestamp: Date.now(),\r\n  });\r\n  \r\n  // Keep top 100 scores\r\n  leaderboard.sort((a, b) => b.score - a.score);\r\n  leaderboard.splice(100);\r\n  \r\n  await env.GAME_STATE.put(key, JSON.stringify(leaderboard));\r\n  \r\n  return new Response(JSON.stringify({ success: true }), {\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n});\r\n\r\n// Serve static assets\r\nrouter.get('/assets/*', async (request, env, ctx) => {\r\n  const url = new URL(request.url);\r\n  const path = url.pathname.replace('/assets/', '');\r\n  \r\n  // Try to get from KV or serve from public folder\r\n  const asset = await env.GAME_STATE.get(`asset:${path}`);\r\n  \r\n  if (asset) {\r\n    return new Response(asset, {\r\n      headers: {\r\n        'Content-Type': getMimeType(path),\r\n        'Cache-Control': 'public, max-age=31536000',\r\n      },\r\n    });\r\n  }\r\n  \r\n  return new Response('Not found', { status: 404 });\r\n});\r\n\r\n// Handle 404s\r\nrouter.all('*', () => new Response('Not Found', { status: 404 }));\r\n\r\n// Helper function for MIME types\r\nfunction getMimeType(filename) {\r\n  const ext = filename.split('.').pop().toLowerCase();\r\n  const types = {\r\n    'js': 'application/javascript',\r\n    'css': 'text/css',\r\n    'html': 'text/html',\r\n    'png': 'image/png',\r\n    'jpg': 'image/jpeg',\r\n    'jpeg': 'image/jpeg',\r\n    'svg': 'image/svg+xml',\r\n    'json': 'application/json',\r\n  };\r\n  return types[ext] || 'text/plain';\r\n}\r\n\r\n// Durable Object for real-time game sessions\r\nexport class GameSession {\r\n  constructor(state, env) {\r\n    this.state = state;\r\n    this.env = env;\r\n    this.sessions = [];\r\n  }\r\n\r\n  async fetch(request) {\r\n    const url = new URL(request.url);\r\n    \r\n    if (url.pathname === '/websocket') {\r\n      const upgradeHeader = request.headers.get('Upgrade');\r\n      if (upgradeHeader !== 'websocket') {\r\n        return new Response('Expected Upgrade: websocket', { status: 426 });\r\n      }\r\n\r\n      const [client, server] = Object.values(new WebSocketPair());\r\n      \r\n      await this.handleSession(server);\r\n      \r\n      return new Response(null, {\r\n        status: 101,\r\n        webSocket: client,\r\n      });\r\n    }\r\n    \r\n    return new Response('Not found', { status: 404 });\r\n  }\r\n\r\n  async handleSession(websocket) {\r\n    websocket.accept();\r\n    this.sessions.push(websocket);\r\n    \r\n    websocket.addEventListener('message', async (msg) => {\r\n      const data = JSON.parse(msg.data);\r\n      \r\n      // Broadcast moves to all connected clients\r\n      if (data.type === 'move') {\r\n        for (const session of this.sessions) {\r\n          if (session !== websocket && session.readyState === WebSocket.OPEN) {\r\n            session.send(JSON.stringify(data));\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    websocket.addEventListener('close', () => {\r\n      this.sessions = this.sessions.filter(s => s !== websocket);\r\n    });\r\n  }\r\n}\r\n\r\n// Export default handler\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    return router.handle(request, env, ctx);\r\n  },\r\n};"],
  "mappings": "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",
  "names": ["Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "fetch", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "method", "regex", "pathname", "params", "groups", "handler", "proxy", "createResponse", "format", "transform", "body", "headers", "rest", "constructor", "name", "Response", "entries", "Object", "fromEntries", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp", "c", "i", "s"]
}
